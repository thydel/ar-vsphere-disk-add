---

- when: debug is defined
  debug:
    msg: |

      Add disk unit '{{ unit }}' of size '{{ size }}G' named {{ name }} on VM '{{ vmname }}'

- name: Add a disk to a VM

  delegate_to: '{{ pysphere }}'
  register: disk_
  no_log: True

  vsphere_add_disk:

    validate_certs: '{{ validate_certs }}'
    vcenter_hostname: "{{ vcenter }}"
    username: "{{ username }}"
    password: "{{ vcenter_password }}"
    guest: "{{ vmname }}"

    disk: "{{ unit }}"
    size: "{{ size }}"

- name: create facts.d

  become: True

  file:
    path: "{{ factsd }}"
    state: directory

- name: Get new disk ID

  become: True
  register: scsi_id_
  changed_when: False
  check_mode: False

  command: /lib/udev/scsi_id --export --whitelisted --device=/dev/{{ device }}

- with_items: '{{ scsi_id_.stdout_lines }}'
  when: item.find('ID_SCSI_SERIAL') != -1
  set_fact:
    ID_SCSI_SERIAL: "{{ item }}"
    id_scsi_serial: "{{ item.split('=').1 }}"

- name: Store new disk ID

  become: True

  copy:
    content: |
      [vsphere]
      {{ ID_SCSI_SERIAL }}
    dest: "{{ factsd }}/disk-{{ device }}.fact"
    
- name: Map id_scsi_serial to disk name

  become: True
  notify: udevadm

  lineinfile:
    dest: "{{ udevrule }}"
    create: True
    regexp: '^ENV.DEVTYPE.=="disk".*{{ id_scsi_serial }}'
    line: >-
      ENV{DEVTYPE}=="disk",
      ENV{ID_BUS}=="scsi",
      ENV{ID_SCSI_SERIAL}=="{{ id_scsi_serial }}",
      SYMLINK+="disk/by-name/{{ name }}"

- name: Map id_scsi_serial to part name

  become: True
  notify: udevadm

  lineinfile:
    dest: "{{ udevrule }}"
    create: True
    regexp: '^ENV.DEVTYPE.=="partition".*{{ id_scsi_serial }}'
    line: >-
      ENV{DEVTYPE}=="partition",
      ENV{ID_BUS}=="scsi",
      ENV{ID_SCSI_SERIAL}=="{{ id_scsi_serial }}",
      SYMLINK+="disk/by-name/{{ name }}-part%n"

- name: Force udevadm if requested

  become: True
  when: rescan is defined

  command: udevadm trigger --verbose --subsystem-match=scsi --attr-match=model='Virtual disk*'

- meta: flush_handlers
